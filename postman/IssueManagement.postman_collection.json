{
	"info": {
		"_postman_id": "issue-management-api-collection-001",
		"name": "Issue Management",
		"description": "API collection for Issue Management service including issue creation, tracking, updates, and resolution.\n\nüéØ SERVICE SCOPE:\nThis collection contains endpoints that are actually implemented in the issue management service:\n- Issue CRUD operations (create, read, update, delete)\n- Project-specific issue listing\n- Issue status management\n- Assignment and tracking workflows\n- Comments and activity feed for issues\n- Attachment support within comments\n\n‚úÖ UNIFIED REQUEST STRUCTURE (v3.0 - UI Compatible):\n- Create Issue: POST /issues (flatter structure with location nested)\n- List Issues: GET /projects/{projectId}/issues (with filters)\n- Get Issue: GET /issues/{issueId} (detailed view with comments and activity)\n- Update Issue: PUT /issues/{issueId} (same structure as create)\n- Update Status: PATCH /issues/{issueId}/status (status only)\n- Delete Issue: DELETE /issues/{issueId} (soft delete)\n- Create Comment: POST /issues/{issueId}/comments (with optional attachments)\n- Get Comments: GET /issues/{issueId}/comments (includes activity log)\n\nüìã REQUEST FORMAT (UI Compatible):\n```json\n{\n  \"project_id\": 123,\n  \"issue_category\": \"quality\",\n  \"category\": \"defect\",\n  \"title\": \"Issue Title\",\n  \"description\": \"Issue Description\",\n  \"priority\": \"high\",\n  \"severity\": \"major\",\n  \"location\": {\n    \"description\": \"Location details\",\n    \"coordinates\": { \"x\": 0, \"y\": 0 }\n  },\n  \"assigned_to\": 5,\n  \"due_date\": \"2025-09-30\",\n  \"distribution_list\": [\"email@example.com\"]\n}\n```\n\nüîê SECURITY IMPROVEMENTS:\n- Organization ID extracted from JWT token (not request body)\n- Project validation happens server-side\n- Enhanced data integrity constraints\n\nüìã CATEGORIES & PRIORITIES:\n- Categories: safety, quality, schedule, cost, design, other\n- Priorities: critical, high, medium, low, planned\n- Severities: blocking, major, minor, cosmetic\n- Statuses: open, in_progress, ready_for_review, closed, rejected, on_hold\n\nüîß TESTING NOTES:\n- Use ID tokens (not access tokens) for API Gateway\n- Test with: buildboard007+555@gmail.com | Mayur@1234\n- Ensure project_id exists before creating issues\n- All dates should use YYYY-MM-DD format\n- Location information is required for issue creation\n- Same request structure for create and update operations\n\nüèóÔ∏è CONSTRUCTION WORKFLOW:\n1. Field workers create issues during inspections\n2. Issues are assigned to responsible parties\n3. Status updates track progress to resolution\n4. Issues are reviewed and closed when complete\n\nüì± MOBILE-OPTIMIZED:\n- Designed for field workers using mobile devices\n- GPS coordinates support for precise location tracking\n- Photo attachments and distribution lists for communication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Issue",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Issue created successfully', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('issue_number');",
							"    pm.expect(responseJson).to.have.property('project_id');",
							"    pm.expect(responseJson).to.have.property('title');",
							"    pm.expect(responseJson).to.have.property('status');",
							"    ",
							"    // Store issue_id for other requests",
							"    pm.globals.set('issue_id', responseJson.id);",
							"    console.log('Created Issue:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"project_id\": {{project_id}},\n    \"location_id\": {{location_id}},\n    \"issue_category\": \"quality\",\n    \"category\": \"defect\",\n    \"detail_category\": \"finish_defect\",\n    \"title\": \"Drywall crack in conference room\",\n    \"description\": \"Visible crack in drywall along the east wall of the main conference room. Crack runs approximately 18 inches vertically starting 3 feet from the floor.\",\n    \"priority\": \"medium\",\n    \"severity\": \"minor\",\n    \"root_cause\": \"settling\",\n    \"location\": {\n        \"description\": \"Main conference room, east wall\",\n        \"building\": \"Building A\",\n        \"level\": \"Floor 2\",\n        \"room\": \"Conference Room 201\",\n        \"coordinates\": {\n            \"x\": 150.5,\n            \"y\": 75.2\n        }\n    },\n    \"discipline\": \"drywall\",\n    \"trade\": \"finishing\",\n    \"assigned_to\": {{user_id}},\n    \"due_date\": \"2025-10-01\",\n    \"distribution_list\": [\n        \"project.manager@company.com\",\n        \"quality.control@company.com\"\n    ]\n}"
				},
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/issues",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"issues"
					]
				}
			}
		},
		{
			"name": "Get Project Issues (with filters)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has issues array', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('issues');",
							"    pm.expect(responseJson).to.have.property('total');",
							"    pm.expect(responseJson).to.have.property('page');",
							"    pm.expect(responseJson).to.have.property('page_size');",
							"    pm.expect(responseJson.issues).to.be.an('array');",
							"    console.log('Project Issues:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/projects/{{project_id}}/issues?status=open&priority=high&page=1&page_size=20",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"projects",
						"{{project_id}}",
						"issues"
					],
					"query": [
						{
							"key": "status",
							"value": "open",
							"description": "Filter by issue status (open, in_progress, closed, etc.)"
						},
						{
							"key": "priority",
							"value": "high",
							"description": "Filter by priority (critical, high, medium, low, planned)"
						},
						{
							"key": "assigned_to",
							"value": "{{user_id}}",
							"description": "Filter by assigned user ID",
							"disabled": true
						},
						{
							"key": "category",
							"value": "quality",
							"description": "Filter by issue category",
							"disabled": true
						},
						{
							"key": "page",
							"value": "1",
							"description": "Page number for pagination"
						},
						{
							"key": "page_size",
							"value": "20",
							"description": "Number of items per page (max 100)"
						}
					]
				}
			}
		},
		{
			"name": "Get All Project Issues",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has issues array', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('issues');",
							"    pm.expect(responseJson).to.have.property('total');",
							"    pm.expect(responseJson.issues).to.be.an('array');",
							"    console.log('All Project Issues:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/projects/{{project_id}}/issues",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"projects",
						"{{project_id}}",
						"issues"
					]
				}
			}
		},
		{
			"name": "Get Issue by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has issue details', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('issue_number');",
							"    pm.expect(responseJson).to.have.property('title');",
							"    pm.expect(responseJson).to.have.property('description');",
							"    pm.expect(responseJson).to.have.property('status');",
							"    pm.expect(responseJson).to.have.property('priority');",
							"    console.log('Issue Details:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/issues/{{issue_id}}",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"issues",
						"{{issue_id}}"
					]
				}
			}
		},
		{
			"name": "Update Issue (Full Update)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Issue updated successfully', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('title');",
							"    pm.expect(responseJson).to.have.property('status');",
							"    console.log('Updated Issue:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Drywall crack in conference room - Updated\",\n    \"description\": \"Updated: Large visible crack in drywall along the east wall of the main conference room. Crack runs approximately 24 inches vertically starting 3 feet from the floor. Appears to be expanding.\",\n    \"category\": \"defect\",\n    \"detail_category\": \"finish_defect\",\n    \"priority\": \"high\",\n    \"severity\": \"major\",\n    \"root_cause\": \"structural_settlement\",\n    \"location\": {\n        \"description\": \"Main conference room, east wall - near entrance\",\n        \"building\": \"Building A\",\n        \"level\": \"Floor 2\",\n        \"room\": \"Conference Room 201\",\n        \"coordinates\": {\n            \"x\": 155.0,\n            \"y\": 80.0\n        }\n    },\n    \"discipline\": \"drywall\",\n    \"trade\": \"finishing\",\n    \"assigned_to\": {{user_id}},\n    \"due_date\": \"2025-09-30\",\n    \"distribution_list\": [\n        \"project.manager@company.com\",\n        \"quality.control@company.com\",\n        \"structural.engineer@company.com\"\n    ],\n    \"status\": \"in_progress\"\n}"
				},
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/issues/{{issue_id}}",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"issues",
						"{{issue_id}}"
					]
				}
			}
		},
		{
			"name": "Update Issue Status Only",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Issue status updated successfully', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('message');",
							"    pm.expect(responseJson).to.have.property('status');",
							"    pm.expect(responseJson.message).to.include('updated successfully');",
							"    console.log('Status Update Response:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"status\": \"ready_for_review\"\n}"
				},
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/issues/{{issue_id}}/status",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"issues",
						"{{issue_id}}",
						"status"
					]
				}
			}
		},
		{
			"name": "Create Issue Comment",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Comment created successfully', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('issue_id');",
							"    pm.expect(responseJson).to.have.property('comment');",
							"    pm.expect(responseJson).to.have.property('comment_type');",
							"    pm.expect(responseJson).to.have.property('created_by');",
							"    pm.expect(responseJson).to.have.property('attachments');",
							"    console.log('Created Comment:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comment\": \"This issue has been inspected and repair work will begin tomorrow morning. Materials have been ordered and should arrive by end of day.\",\n    \"attachment_ids\": []\n}"
				},
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/issues/{{issue_id}}/comments",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"issues",
						"{{issue_id}}",
						"comments"
					]
				}
			}
		},
		{
			"name": "Create Comment with Attachments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test('Comment with attachments created successfully', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('id');",
							"    pm.expect(responseJson).to.have.property('comment');",
							"    pm.expect(responseJson).to.have.property('attachments');",
							"    pm.expect(responseJson.attachments).to.be.an('array');",
							"    console.log('Created Comment with Attachments:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"comment\": \"Photos of the repair work in progress. See attached images showing before and after.\",\n    \"attachment_ids\": [123, 124]\n}"
				},
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/issues/{{issue_id}}/comments",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"issues",
						"{{issue_id}}",
						"comments"
					]
				}
			}
		},
		{
			"name": "Get Issue Comments and Activity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response has comments array', function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an('array');",
							"    ",
							"    // Check comment structure if array is not empty",
							"    if (responseJson.length > 0) {",
							"        const firstComment = responseJson[0];",
							"        pm.expect(firstComment).to.have.property('id');",
							"        pm.expect(firstComment).to.have.property('issue_id');",
							"        pm.expect(firstComment).to.have.property('comment');",
							"        pm.expect(firstComment).to.have.property('comment_type');",
							"        pm.expect(firstComment).to.have.property('created_by');",
							"        pm.expect(firstComment).to.have.property('created_by_name');",
							"        pm.expect(firstComment).to.have.property('attachments');",
							"    }",
							"    ",
							"    console.log('Issue Comments and Activity:', JSON.stringify(responseJson, null, 2));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://74zc1md7sc.execute-api.us-east-2.amazonaws.com/main/issues/{{issue_id}}/comments",
					"protocol": "https",
					"host": [
						"74zc1md7sc",
						"execute-api",
						"us-east-2",
						"amazonaws",
						"com"
					],
					"path": [
						"main",
						"issues",
						"{{issue_id}}",
						"comments"
					]
				}
			}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{id_token}}",
				"type": "string"
			}
		]
	}
}